name: 'Run Terrafrom Plan'

on: 
  pull_request:
  workflow_dispatch:
    inputs:
      target:
        description: 'Terraform target'     
        required: false

jobs:
  plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ env.GITHUB_REF }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.5
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
      - name: Terraform init
        id: init
        run: terraform init
      - name: Terraform validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform plan
        id: terraform_plan
        run: |
          if [ "${{ github.event.inputs.target }}" = "" ]; then
            echo "Running without target!"
            terraform plan -no-color -var "aws_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" -var "aws_key_secret=${{ secrets.AWS_KEY_SECRET }}" > plan.log
          else
            echo "Running with target: ${{ github.event.inputs.target }}"
            terraform plan -no-color -var "aws_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}" -var "aws_key_secret=${{ secrets.AWS_KEY_SECRET }}" -target="${{ github.event.inputs.target }}" > plan.log
          fi
      - name: Show plan
        id: terraform_show_plan
        run: |
          cat plan.log
      - name: Update Pull Request
        if: always() && github.event == 'push'
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan_log = fs.readFileSync("plan.log");

            const output = `
            #### Terraform Format and Style ðŸ–Œ  : \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization âš™ : \`${{ steps.init.outcome }}\`
            #### Terraform Plan ðŸ“– : \`${{ steps.terraform_plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${plan_log}\`\`\`

            </details>


            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
              })

      

  